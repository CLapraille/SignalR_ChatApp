{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christophe\\\\source\\\\repos\\\\ChatServiceSignalR\\\\chatservice.chatapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport WaitingRoom from './components/waitingroom';\nimport { useState } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport ChatRoom from './components/ChatRoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [conn, setConnection] = useState();\n  const [messageList, setMessageList] = useState();\n  const joinChatRoom = async (username, chatRoom) => {\n    try {\n      //initiate a connection\n      const conn = new HubConnectionBuilder().withUrl(\"http://localhost:5209/chat\").configureLogging(LogLevel.Debug).build();\n\n      //set up handler\n      conn.on(\"JoinSpecificChatRoom\", (username, msg) => {\n        console.log(\"msg1: \", msg);\n        setMessageList(messageList => [...messageList, {\n          username,\n          msg\n        }]);\n      });\n      conn.on(\"ReceiveSpecificMessage\", (username, msg) => {\n        console.log(\"msg2: \" + msg + \" username \" + username);\n        setMessages(messages => [...messages, {\n          username,\n          msg\n        }]);\n      });\n      await conn.start();\n      await conn.invoke(\"JoinSpecificChatRoom\", {\n        username,\n        chatRoom\n      });\n      setConnection(conn);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          class: \"px-5 my-5\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            sm: \"12\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"font-weight-light\",\n              children: \"Welcome to the my ChatApp using SingalR !\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), !conn ? /*#__PURE__*/_jsxDEV(WaitingRoom, {\n          joinChatRoom: joinChatRoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ChatRoom, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qb6FZNxMVPWYgw9RJ0JysYPSpqE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Container","Row","Col","WaitingRoom","useState","HubConnectionBuilder","LogLevel","ChatRoom","jsxDEV","_jsxDEV","App","_s","conn","setConnection","messageList","setMessageList","joinChatRoom","username","chatRoom","withUrl","configureLogging","Debug","build","on","msg","console","log","setMessages","messages","start","invoke","e","children","class","sm","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Christophe/source/repos/ChatServiceSignalR/chatservice.chatapp/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport WaitingRoom from './components/waitingroom';\nimport { useState } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport ChatRoom from './components/ChatRoom';\n\nfunction App() {\n\n  const[conn, setConnection] = useState();\n  const[messageList, setMessageList] = useState();\n\n  const joinChatRoom = async (username, chatRoom) => {\n    try {\n      //initiate a connection\n      const conn = new HubConnectionBuilder()\n                    .withUrl(\"http://localhost:5209/chat\")\n                    .configureLogging(LogLevel.Debug)\n                    .build();\n\n      //set up handler\n      conn.on(\"JoinSpecificChatRoom\", (username, msg) => {\n        console.log(\"msg1: \", msg);\n        setMessageList(messageList =>[...messageList, {username, msg}]);\n      });\n\n      conn.on(\"ReceiveSpecificMessage\", (username, msg) => {\n        console.log(\"msg2: \"+ msg + \" username \" + username);\n        setMessages(messages =>[...messages, {username, msg}]);\n      });\n\n      await conn.start();\n      await conn.invoke(\"JoinSpecificChatRoom\", {username, chatRoom});\n\n      setConnection(conn);\n      \n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return (\n    <div>\n      <main>\n        <Container>\n          <Row class='px-5 my-5'>\n            <Col sm='12'>\n              <h1 className='font-weight-light'>Welcome to the my ChatApp using SingalR !</h1>\n            </Col>\n          </Row>\n          { ! conn \n            ? <WaitingRoom joinChatRoom={joinChatRoom}></WaitingRoom>\n            : <ChatRoom messages={messages}></ChatRoom>\n          }\n        </Container>\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}